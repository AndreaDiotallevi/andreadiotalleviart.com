AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for andreadiotalleviart.com

Globals:
    Function:
        CodeUri: ./
        Timeout: 100
        Runtime: nodejs20.x
        MemorySize: 1024
        Tracing: Active
        Architectures:
            - x86_64

Parameters:
    Environment:
        Type: String
        Default: sandbox
        AllowedValues: [sandbox, staging, production]
    NewsletterContactListName:
        Type: String
        Default: Newsletter
        AllowedValues: [Newsletter]

Conditions:
    IsProduction: !Equals [!Ref Environment, "production"]

Resources:
    # BUCKETS
    Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub ${AWS::StackName}-${Environment}
            PublicAccessBlockConfiguration:
                BlockPublicPolicy: false

    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal: "*"
                      Action:
                          - "s3:GetObject"
                      Resource:
                          - !Sub "arn:aws:s3:::${Bucket}/*"

    ## EVENTS
    EventBus:
        Type: AWS::Events::EventBus
        Properties:
            Name: !Sub ${AWS::StackName}-EventBus

    StripeCheckoutSessionCompletedRule:
        Type: AWS::Events::Rule
        Properties:
            EventBusName: "{{resolve:ssm:STRIPE_EVENT_BUS_NAME}}"
            EventPattern:
                account:
                    - !Sub ${AWS::AccountId}
                source:
                    - "{{resolve:ssm:STRIPE_EVENT_BUS_NAME}}"
                detail-type:
                    - checkout.session.completed
            Targets:
                - Arn: !GetAtt SendOrderConfirmationEmailQueue.Arn
                  Id: SendOrderConfirmationEmailQueueTarget
                - Arn: !GetAtt TheprintspaceCreateOrderQueue.Arn
                  Id: TheprintspaceCreateOrderQueueTarget

    # QUEUES
    SendOrderConfirmationEmailQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: events.amazonaws.com
                      Action: sqs:SendMessage
                      Resource: !GetAtt SendOrderConfirmationEmailQueue.Arn
            Queues:
                - Ref: SendOrderConfirmationEmailQueue

    SendOrderConfirmationEmailQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-SendOrderConfirmationEmailQueue
            VisibilityTimeout: 100
            ReceiveMessageWaitTimeSeconds: 20
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt SendOrderConfirmationEmailDLQ.Arn
                maxReceiveCount: 3

    SendOrderConfirmationEmailDLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-SendOrderConfirmationEmailDLQ
            MessageRetentionPeriod: 1209600

    TheprintspaceCreateOrderQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: events.amazonaws.com
                      Action: sqs:SendMessage
                      Resource: !GetAtt TheprintspaceCreateOrderQueue.Arn
            Queues:
                - Ref: TheprintspaceCreateOrderQueue

    TheprintspaceCreateOrderQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-TheprintspaceCreateOrderQueue
            VisibilityTimeout: 100
            ReceiveMessageWaitTimeSeconds: 20
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt TheprintspaceCreateOrderDLQ.Arn
                maxReceiveCount: 1

    TheprintspaceCreateOrderDLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-TheprintspaceCreateOrderDLQ
            MessageRetentionPeriod: 1209600

    SendOrderShippedEmailQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: events.amazonaws.com
                      Action: sqs:SendMessage
                      Resource: !GetAtt SendOrderShippedEmailQueue.Arn
            Queues:
                - Ref: SendOrderShippedEmailQueue

    SendOrderShippedEmailQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-SendOrderShippedEmailQueue
            VisibilityTimeout: 100
            ReceiveMessageWaitTimeSeconds: 20
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt SendOrderShippedEmailDLQ.Arn
                maxReceiveCount: 3

    SendOrderShippedEmailDLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-SendOrderShippedEmailDLQ
            MessageRetentionPeriod: 1209600

    # TOPICS
    SendOrderConfirmationEmailTopic:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: SendOrderConfirmationEmailTopic
            TopicName: SendOrderConfirmationEmailTopic

    SendOrderConfirmationEmailTopicSubscription:
        Type: AWS::SNS::Subscription
        Properties:
            Protocol: email
            TopicArn: !Ref SendOrderConfirmationEmailTopic
            Endpoint: "{{resolve:ssm:EMAIL_SNS_TOPICS}}"

    SendOrderShippedEmailTopic:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: SendOrderShippedEmailTopic
            TopicName: SendOrderShippedEmailTopic

    SendOrderShippedEmailTopicSubscription:
        Type: AWS::SNS::Subscription
        Properties:
            Protocol: email
            TopicArn: !Ref SendOrderShippedEmailTopic
            Endpoint: "{{resolve:ssm:EMAIL_SNS_TOPICS}}"

    TheprintspaceCreateOrderTopic:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: TheprintspaceCreateOrderTopic
            TopicName: TheprintspaceCreateOrderTopic

    TheprintspaceCreateOrderTopicSubscription:
        Type: AWS::SNS::Subscription
        Properties:
            Protocol: email
            TopicArn: !Ref TheprintspaceCreateOrderTopic
            Endpoint: "{{resolve:ssm:EMAIL_SNS_TOPICS}}"

    AchievementsNotificationTopic:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: AchievementsNotificationTopic
            TopicName: AchievementsNotificationTopic

    AchievementsNotificationTopicSubscription:
        Type: AWS::SNS::Subscription
        Properties:
            Protocol: email
            TopicArn: !Ref AchievementsNotificationTopic
            Endpoint: "{{resolve:ssm:EMAIL_SNS_TOPICS}}"

    # ALARMS
    SendOrderConfirmationEmailAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: SendOrderConfirmationEmailAlarm
            AlarmDescription: "There was an error while sending the confirmation email after checkout session completed."
            Namespace: AWS/SQS
            MetricName: ApproximateNumberOfMessagesVisible
            Dimensions:
                - Name: QueueName
                  Value: !GetAtt SendOrderConfirmationEmailDLQ.QueueName
            Statistic: Sum
            Period: 300
            EvaluationPeriods: 1
            Threshold: 1
            ComparisonOperator: GreaterThanOrEqualToThreshold
            AlarmActions:
                - !Ref SendOrderConfirmationEmailTopic

    SendOrderShippedEmailAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: SendOrderShippedEmailAlarm
            AlarmDescription: "There was an error while sending the email after order shipped."
            Namespace: AWS/SQS
            MetricName: ApproximateNumberOfMessagesVisible
            Dimensions:
                - Name: QueueName
                  Value: !GetAtt SendOrderShippedEmailDLQ.QueueName
            Statistic: Sum
            Period: 300
            EvaluationPeriods: 1
            Threshold: 1
            ComparisonOperator: GreaterThanOrEqualToThreshold
            AlarmActions:
                - !Ref SendOrderShippedEmailTopic

    TheprintspaceCreateOrderAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: TheprintspaceCreateOrderAlarm
            AlarmDescription: "There was an error while creating an order with Theprintspace."
            Namespace: AWS/SQS
            MetricName: ApproximateNumberOfMessagesVisible
            Dimensions:
                - Name: QueueName
                  Value: !GetAtt TheprintspaceCreateOrderDLQ.QueueName
            Statistic: Sum
            Period: 300
            EvaluationPeriods: 1
            Threshold: 1
            ComparisonOperator: GreaterThanOrEqualToThreshold
            AlarmActions:
                - !Ref TheprintspaceCreateOrderTopic

    # EMAIL TEMPLATES
    OrderConfirmationEmailTemplate:
        Type: AWS::SES::Template
        Properties:
            Template:
                TemplateName: OrderConfirmationEmailTemplate
                HtmlPart: !Sub |
                    <html>
                        <body>
                            <h3>Dear {{name}},</h3>
                            <p>Thanks for your order!</p>
                            <p>As soon as the package is on its way, you will receive a shipping confirmation email, with details on how to track your delivery.</p>
                            <h3>Items</h3>
                            <table>
                                <tbody>
                                    {{#each item}}
                                        <tr style="margin-bottom: 8px;">
                                            <td width="20%">
                                                <img src="{{imageSource}}" alt="{{displayName}}" style="width: 100%; height: auto;">
                                            </td>
                                            <td width="80%" style="vertical-align: top; padding-left: 12px;">
                                                {{quantity}} x {{displayName}} - {{description}}
                                            </td>
                                        </tr>
                                    {{/each}}
                                </tbody>
                            </table>
                            <h3>Delivery address</h3>
                            <div>
                                {{name}}<br>
                                {{addressLine1}}<br>
                                {{#if addressLine2}}
                                    {{addressLine2}}<br>
                                {{/if}}
                                {{#if postcode}}
                                    {{postcode}}<br>
                                {{/if}}
                                {{#if town}}
                                    {{town}}<br>
                                {{/if}}
                                {{country}}<br>
                            </div>
                            <h3>Payment summary</h3>
                            <div>
                                Subtotal: {{amountSubtotal}}<br>
                                Shipping: Free<br>
                                Discounts: {{amountDiscount}}<br>
                                Total: {{amountTotal}}
                            </div>
                            {{#if receiptPdf}}
                                <p>You can download your receipt <a href="{{receiptPdf}}">here</a>.</p>
                            {{/if}}
                            <p>For any questions regarding your order, just reply to this email.</p>
                            <h3>Thank you</h3>
                            <a href="https://andreadiotalleviart.com/shop">www.andreadiotalleviart.com</a>
                        </body>
                    </html>
                SubjectPart: "Your order"

    OrderShippedEmailTemplate:
        Type: AWS::SES::Template
        Properties:
            Template:
                TemplateName: OrderShippedEmailTemplate
                HtmlPart: !Sub |
                    <html>
                        <body>
                            <h3>Dear {{name}},</h3>
                            <p>Your order has been shipped and is now on its way!</p>
                            <h3>Shipment details</h3>
                            <div>
                                Carrier name: {{carrierName}}<br>
                                Carrier service: {{carrierService}}<br>
                                {{#if trackingNumber}}
                                    Tracking number: {{trackingNumber}}<br>
                                {{/if}}
                                {{#if trackingUrl}}
                                    Tracking link: <a href="{{trackingUrl}}">here</a>
                                {{/if}}
                            </div>
                            <h3>Items</h3>
                            <div>
                                {{productDisplayName}} {{productDescription}}<br><br>
                                <img src="{{productImageSource}}" alt="{{productDisplayName}}" style="max-width: 500px; width: 100%;">
                            </div>
                            <h3>Delivery address</h3>
                              <div>
                                {{name}}<br>
                                {{addressLine1}}<br>
                                {{#if addressLine2}}
                                    {{addressLine2}}<br>
                                {{/if}}
                                {{#if postcode}}
                                    {{postcode}}<br>
                                {{/if}}
                                {{#if town}}
                                    {{town}}<br>
                                {{/if}}
                                {{country}}<br>
                            </div>
                            <p>For any questions regarding your order, you can reply to this email.</p>
                            <h3>Thank you</h3>
                            <a href="https://andreadiotalleviart.com/shop">www.andreadiotalleviart.com</a>
                        </body>
                    </html>
                SubjectPart: "Your order has been shipped"

    ContactPageEmailTemplate:
        Type: AWS::SES::Template
        Properties:
            Template:
                TemplateName: ContactPageEmailTemplate
                HtmlPart: !Sub |
                    <html>
                        <body>
                            <h3>Message from {{name}} ({{email}})</h3>
                            <p>{{message}}</p>
                        </body>
                    </html>
                SubjectPart: "{{subject}}"

    NewsletterWelcomeEmailTemplate:
        Type: AWS::SES::Template
        Properties:
            Template:
                TemplateName: NewsletterWelcomeEmailTemplate
                HtmlPart: !Sub |
                    <html>
                        <body>
                            <h3>Dear friend,</h3>
                            <p>Welcome to my newsletter!</p>
                            <p>You will be the first to know when my new print shop goes live.</p>
                            <p>Stay tuned!</p>
                            <h3>Thank you</h3>
                            <hr>
                            <small>
                                You are receiving this email because you subscribed to Andrea Diotallevi Art newsletter. 
                                If you no longer wish to receive these emails, you can 
                                <a href="{{amazonSESUnsubscribeUrl}}">unsubscribe here</a>.
                            </small>
                        </body>
                    </html>
                SubjectPart: "Welcome to my newsletter"

    NewsletterDiscountEmailTemplate:
        Type: AWS::SES::Template
        Properties:
            Template:
                TemplateName: NewsletterDiscountEmailTemplate
                HtmlPart: !Sub |
                    <html>
                        <body>
                            <h3>Dear friend,</h3>
                            <p>As promised, simply use the promo code <big>{{promotionCode}}</big> in the cart page to apply a 10% discount.</p>
                            <h3>Andrea</h3>
                            <hr>
                            <small>
                                You are receiving this email because you subscribed to Andrea Diotallevi Art newsletter. 
                                If you no longer wish to receive these emails, you can 
                                <a href="{{amazonSESUnsubscribeUrl}}">unsubscribe here</a>.
                            </small>
                        </body>
                    </html>
                SubjectPart: "Test email"

    NewsletterEmailTestTemplate:
        Type: AWS::SES::Template
        Properties:
            Template:
                TemplateName: NewsletterEmailTestTemplate
                HtmlPart: !Sub |
                    <html>
                        <body>
                            Test email {{amazonSESUnsubscribeUrl}}
                        </body>
                    </html>
                SubjectPart: "Newsletter test email"

    # FUNCTIONS
    ApiGateway:
        Type: AWS::Serverless::Api
        Properties:
            StageName: Prod
            OpenApiVersion: "2.0"
            Auth:
                ApiKeyRequired: false
            Cors:
                AllowMethods: "'*'"
                AllowHeaders: "'*'"
                AllowOrigin: "'{{resolve:ssm:CORS_ALLOW_ORIGIN}}'"
            MethodSettings:
                - ResourcePath: "/*"
                  HttpMethod: "*"
                  ThrottlingBurstLimit: 100
                  ThrottlingRateLimit: 50

    StripeCreateCheckoutSessionFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-StripeCreateCheckoutSession
            Handler: src/lambdas/api_stripeCreateCheckoutSession.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /stripe-create-checkout-session
                        Method: POST
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_stripeCreateCheckoutSession.ts

    StripeGetPricesFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-StripeGetPrices
            Handler: src/lambdas/api_stripeGetPrices.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /stripe-get-prices
                        Method: GET
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_stripeGetPrices.ts

    StripeRetrieveCheckoutSessionFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-StripeRetrieveCheckoutSession
            Handler: src/lambdas/api_stripeRetrieveCheckoutSession.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /stripe-retrieve-checkout-session/{sessionId}
                        Method: GET
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_stripeRetrieveCheckoutSession.ts

    StripeSynchroniseProductsFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-StripeSynchroniseProducts
            Handler: src/lambdas/api_stripeSynchroniseProducts.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /stripe-synchronise-products
                        Method: POST
            Environment:
                Variables:
                    ENVIRONMENT: !Ref Environment
                    IMAGES_DOMAIN: "{{resolve:ssm:IMAGES_DOMAIN}}"
                    CREATIVEHUB_API_URL: "{{resolve:ssm:CREATIVEHUB_API_URL}}"
                    CLOUDINARY_CLOUD_NAME: "{{resolve:ssm:CLOUDINARY_CLOUD_NAME}}"
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CREATIVEHUB_API_KEY
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_stripeSynchroniseProducts.ts

    SendOrderConfirmationEmailFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-SendOrderConfirmationEmail
            Handler: src/lambdas/checkoutCompleted_sendOrderConfirmationEmail.handler
            Environment:
                Variables:
                    CONFIGURATION_SET_NAME: !Ref SESConfigurationSet
            Events:
                MySQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SendOrderConfirmationEmailQueue.Arn
                        BatchSize: 5
            Policies:
                - Statement:
                      - Sid: sendOrderConfirmationEmail
                        Effect: Allow
                        Action:
                            - SES:SendEmail
                            - SES:SendTemplatedEmail
                        Resource: "*"
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/EMAIL_ORDERS
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/checkoutCompleted_sendOrderConfirmationEmail.ts

    SendContactPageEmailFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-SendContactPageEmail
            Handler: src/lambdas/api_sendContactPageEmail.handler
            Environment:
                Variables:
                    CONFIGURATION_SET_NAME: !Ref SESConfigurationSet
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /send-contact-page-email
                        Method: POST
            Policies:
                - Statement:
                      - Sid: sendContactPageEmail
                        Effect: Allow
                        Action:
                            - SES:SendEmail
                            - SES:SendTemplatedEmail
                        Resource: "*"
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/EMAIL_SUPPORT
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_sendContactPageEmail.ts

    TheprintspaceHandleWebhooksFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-TheprintspaceHandleWebhooks
            Handler: src/lambdas/api_theprintspaceHandleWebhooks.handler
            Environment:
                Variables:
                    EVENT_BUS_NAME: !Ref EventBus
            Events:
                TheprintspaceWebhook:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /theprintspace-handle-webhooks
                        Method: POST
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_theprintspaceHandleWebhooks.ts

    TheprintspaceCreateOrderFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-TheprintspaceCreateOrder
            Handler: src/lambdas/checkoutCompleted_theprintspaceCreateOrder.handler
            Events:
                MySQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt TheprintspaceCreateOrderQueue.Arn
                        BatchSize: 5
            Environment:
                Variables:
                    CREATIVEHUB_API_URL: "{{resolve:ssm:CREATIVEHUB_API_URL}}"
                    ENVIRONMENT: !Ref Environment
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CREATIVEHUB_API_KEY
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/checkoutCompleted_theprintspaceCreateOrder.ts

    GetLocaleCurrencyFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-GetLocaleCurrency
            Handler: src/lambdas/api_getLocaleCurrency.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /get-locale-currency
                        Method: GET
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_getLocaleCurrency.ts

    NewsletterListContactsFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-NewsletterListContacts
            Handler: src/lambdas/api_newsletterListContacts.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /newsletter-contacts
                        Method: GET
            Environment:
                Variables:
                    NEWSLETTER_CONTACT_LIST_NAME: !Ref NewsletterContactListName
                    CONFIGURATION_SET_NAME: !Ref SESConfigurationSet
            Policies:
                - Statement:
                      - Sid: listContacts
                        Effect: Allow
                        Action:
                            - SES:ListContacts
                        Resource:
                            - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:contact-list/${NewsletterContactListName}
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_newsletterListContacts.ts

    NewsletterCreateContactFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-NewsletterCreateContact
            Handler: src/lambdas/api_newsletterCreateContact.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /newsletter-contacts
                        Method: POST
            Environment:
                Variables:
                    NEWSLETTER_EMAIL_TEMPLATE_NAME: !Ref NewsletterWelcomeEmailTemplate
                    NEWSLETTER_CONTACT_LIST_NAME: !Ref NewsletterContactListName
                    NEWSLETTER_TOPIC_NAME: GeneralUpdates
                    ACHIEVEMENTS_TOPIC_ARN: !Ref AchievementsNotificationTopic
            Policies:
                - Statement:
                      - Sid: createContacts
                        Effect: Allow
                        Action:
                            - SES:CreateContact
                        Resource:
                            - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:contact-list/${NewsletterContactListName}
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/EMAIL_ANDREA
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/NEWSLETTER_PROMOTION_CODE
                - Statement:
                      - Sid: sendNewsletterWelcomeEmail
                        Effect: Allow
                        Action:
                            - SES:SendEmail
                            - SES:SendTemplatedEmail
                        Resource: "*"
                - Statement:
                      - Sid: publishMessage
                        Effect: Allow
                        Action:
                            - SNS:Publish
                        Resource:
                            - !Ref AchievementsNotificationTopic
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_newsletterCreateContact.ts

    NewsletterSendBulkEmailFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-NewsletterSendBulkEmail
            Handler: src/lambdas/api_newsletterSendBulkEmail.handler
            Environment:
                Variables:
                    NEWSLETTER_EMAIL_TEMPLATE_NAME: !Ref NewsletterWelcomeEmailTemplate
                    NEWSLETTER_CONTACT_LIST_NAME: !Ref NewsletterContactListName
                    NEWSLETTER_TOPIC_NAME: GeneralUpdates
                    CONFIGURATION_SET_NAME: !Ref SESConfigurationSet
            Policies:
                - Statement:
                      - Sid: listContacts
                        Effect: Allow
                        Action:
                            - SES:ListContacts
                        Resource:
                            - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:contact-list/${NewsletterContactListName}
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - SSM:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/EMAIL_ANDREA
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/NEWSLETTER_PROMOTION_CODE
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/NEWSLETTER_CONTACT_LIST_NAME
                - Statement:
                      - Sid: sendNewsletterDiscountEmail
                        Effect: Allow
                        Action:
                            - SES:SendEmail
                            - SES:SendTemplatedEmail
                        Resource: "*"
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/lambdas/api_newsletterSendBulkEmail.ts

    # NEWSLETTER CONTACT LISTS
    NewsletterContactList:
        Type: AWS::SES::ContactList
        Properties:
            ContactListName: !Ref NewsletterContactListName
            Description: Newsletter
            Topics:
                - TopicName: GeneralUpdates
                  DisplayName: General Updates
                  Description: Updates on general topics.
                  DefaultSubscriptionStatus: OPT_IN

    # SESEventPublishingRole:
    #     Type: AWS::IAM::Role
    #     Properties:
    #         AssumeRolePolicyDocument:
    #             Version: "2012-10-17"
    #             Statement:
    #                 - Effect: Allow
    #                   Principal:
    #                       Service: ses.amazonaws.com
    #                   Action: sts:AssumeRole
    #         Policies:
    #             - PolicyName: SESEventBridgePublishPolicy
    #               PolicyDocument:
    #                   Version: "2012-10-17"
    #                   Statement:
    #                       - Effect: Allow
    #                         Action:
    #                             - events:PutEvents
    #                         Resource:
    #                             - !GetAtt EventBus.Arn

    # SESConfigurationSet:
    #     Type: AWS::SES::ConfigurationSet
    #     Properties:
    #         Name: "EmailLoggingConfigSet"

    # SESConfigurationSetEventDestination:
    #     Type: AWS::SES::ConfigurationSetEventDestination
    #     Properties:
    #         ConfigurationSetName: !Ref SESConfigurationSet
    #         EventDestination:
    #             Name: EventBridgeDestination
    #             Enabled: true
    #             MatchingEventTypes:
    #                 - send
    #                 - reject
    #                 - bounce
    #                 - complaint
    #                 - delivery
    #                 - open
    #                 - click
    #                 - renderingFailure
    #             EventBridgeDestination:
    #                 EventBusArn: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

    SESEventPublishingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ses.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: SESEventSNSPublishPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - SNS:Publish
                            Resource:
                                - !Ref SNSNotificationTopic

    SNSNotificationTopic:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: EmailEventsTopic
            TopicName: EmailEventsTopic
            Subscription:
                - Protocol: email
                  Endpoint: "{{resolve:ssm:EMAIL_SNS_TOPICS}}"

    SESConfigurationSet:
        Type: AWS::SES::ConfigurationSet
        Properties:
            Name: EmailLoggingConfigurationSet

    SESConfigurationSetEventDestination:
        Type: AWS::SES::ConfigurationSetEventDestination
        Properties:
            ConfigurationSetName: !Ref SESConfigurationSet
            EventDestination:
                Name: SNSDestination
                Enabled: true
                MatchingEventTypes:
                    - send
                    - reject
                    - bounce
                    - complaint
                    - delivery
                    - open
                    - click
                    - renderingFailure
                SnsDestination:
                    TopicARN: !Ref SNSNotificationTopic
