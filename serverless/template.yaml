AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for andreadiotalleviart.com

Globals:
    Function:
        CodeUri: ./
        Timeout: 100
        Runtime: nodejs20.x
        MemorySize: 1024
        Tracing: Active
        Architectures:
            - x86_64

Resources:
    Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub ${AWS::StackName}-images

    ApiGateway:
        Type: AWS::Serverless::Api
        Properties:
            StageName: Prod
            Auth:
                ApiKeyRequired: false
            Cors:
                AllowMethods: "'*'"
                AllowHeaders: "'Content-Type, Authorization, X-Api-Key'"
                AllowOrigin: "'*'"

    EventBus:
        Type: AWS::Events::EventBus
        Properties:
            Name: !Sub ${AWS::StackName}-EventBus

    OrderFulfillmentStateMachine:
        Type: AWS::Serverless::StateMachine
        Properties:
            Definition:
                StartAt: CreatePresignedUrl
                States:
                    CreatePresignedUrl:
                        Type: Task
                        Resource: !GetAtt CreatePresignedUrlFunction.Arn
                        End: true
            Policies:
                - Statement:
                      - Sid: invokeFunction
                        Effect: Allow
                        Action:
                            - lambda:InvokeFunction
                        Resource:
                            - !GetAtt CreatePresignedUrlFunction.Arn

    EventBusRuleCheckoutSessionCompleted:
        Type: AWS::Events::Rule
        Properties:
            EventBusName: !Ref EventBus
            EventPattern:
                account:
                    - !Sub ${AWS::AccountId}
                source:
                    - stripe
                detail-type:
                    - CheckoutSessionCompleted
            Targets:
                - Arn: !GetAtt CheckoutSessionCompletedSendEmailQueue.Arn
                  Id: TestId

    EventBusToCheckoutSessionCompletedSendEmailQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: events.amazonaws.com
                      Action: sqs:SendMessage
                      Resource: !GetAtt CheckoutSessionCompletedSendEmailQueue.Arn
            Queues:
                - Ref: CheckoutSessionCompletedSendEmailQueue

    CheckoutSessionCompletedSendEmailQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-CheckoutSessionCompletedSendEmailQueue
            VisibilityTimeout: 100
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt CheckoutSessionCompletedSendEmailDLQ.Arn
                maxReceiveCount: 3

    CheckoutSessionCompletedSendEmailDLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-CheckoutSessionCompletedSendEmailDLQ
            MessageRetentionPeriod: 1209600

    CheckoutSessionCompletedSendEmailAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CheckoutSessionCompletedSendEmailAlarm
            AlarmDescription: "There was an error while sending the confirmation email after checkout."
            Namespace: AWS/SQS
            MetricName: ApproximateNumberOfMessagesVisible
            Dimensions:
                - Name: QueueName
                  Value: !GetAtt CheckoutSessionCompletedSendEmailDLQ.QueueName
            Statistic: Sum
            Period: 300
            EvaluationPeriods: 1
            Threshold: 1
            ComparisonOperator: GreaterThanOrEqualToThreshold
            AlarmActions:
                - !Ref CheckoutSessionCompletedSendEmailTopic

    CheckoutSessionCompletedSendEmailTopic:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: CheckoutSessionCompletedSendEmailTopic
            TopicName: CheckoutSessionCompletedSendEmailTopic

    CheckoutSessionCompletedSendEmailTopicSubscription:
        Type: AWS::SNS::Subscription
        Properties:
            Protocol: email
            TopicArn: !Ref CheckoutSessionCompletedSendEmailTopic
            Endpoint: "{{resolve:ssm:EMAIL_SOURCE}}"

    CheckoutSessionCompletedEmailTemplate:
        Type: AWS::SES::Template
        Properties:
            Template:
                TemplateName: CheckoutSessionCompletedEmailTemplate
                HtmlPart: !Sub |
                    <html>
                        <body>
                            <h2>Thanks for your order {{name}}!</h2>
                            <p>As soon as your package is on its way, you will receive a delivery confirmation from me by email.</p>
                            <h3>Delivery address</h3>
                            <div>
                                {{name}}<br>
                                {{addressLine1}}<br>
                                {{#if addressLine2}}
                                    {{addressLine2}}<br>
                                {{/if}}
                                {{postcode}}, {{town}}, {{country}}
                            </div>
                            <h3>Your items</h3>
                            <div>
                                {{productName}}<br>
                                {{productDescription}}<br>
                                Quantity: {{itemQuantity}}<br><br>
                                <img src="{{productImageSource}}" alt="{{productName}}" width="120">
                            </div>
                            <h3>Payment summary</h3>
                            <div>
                                Payment method: {{paymentMethod}}<br>
                                Subtotal: {{amountSubtotal}}<br>
                                Shipping fee: Free<br>
                                Discounts: {{amountDiscount}}<br>
                                Total: {{amountTotal}}
                            </div>
                            <h3>With love, Andrea</h3>
                            <a href="https://andreadiotalleviart.com/shop">www.andreadiotalleviart.com</a>
                        </body>
                    </html>
                SubjectPart: "Your Andrea Diotallevi Art Order"

    CreateCheckoutSessionFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-CreateCheckoutSession
            Handler: src/handlers/createCheckoutSession.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /create-checkout-session
                        Method: POST
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - ssm:GetParameter
                        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/handlers/createCheckoutSession.ts

    RetrieveCheckoutSessionFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-RetrieveCheckoutSession
            Handler: src/handlers/retrieveCheckoutSession.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /retrieve-checkout-session/{sessionId}
                        Method: GET
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - ssm:GetParameter
                        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/handlers/retrieveCheckoutSession.ts

    SendEmailFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-SendEmail
            Handler: src/handlers/sendEmail.handler
            Events:
                Root:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /send-email
                        Method: POST
                MySQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt CheckoutSessionCompletedSendEmailQueue.Arn
                        BatchSize: 5
            Policies:
                - Statement:
                      - Sid: sendEmail
                        Effect: Allow
                        Action:
                            - ses:SendEmail
                            - ses:SendTemplatedEmail
                        Resource: "*"
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - ssm:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/EMAIL_SOURCE
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/EMAIL_DESTINATION
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/handlers/sendEmail.ts

    StripeWebhookFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-StripeWebhook
            Handler: src/handlers/stripeWebhook.handler
            Environment:
                Variables:
                    EVENT_BUS_NAME: !Ref EventBus
            Events:
                StripeWebhook:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /stripe-webhook
                        Method: POST
            Policies:
                - Statement:
                      - Sid: readParameterStore
                        Effect: Allow
                        Action:
                            - ssm:GetParameter
                        Resource:
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SECRET_KEY
                            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STRIPE_SIGNING_SECRET
                - Statement:
                      - Sid: putEvents
                        Effect: Allow
                        Action:
                            - events:PutEvents
                        Resource: !GetAtt EventBus.Arn
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/handlers/stripeWebhook.ts

    ProdigiWebhookFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-ProdigiWebhook
            Handler: src/handlers/prodigiWebhook.handler
            Environment:
                Variables:
                    EVENT_BUS_NAME: !Ref EventBus
            Events:
                ProdigiWebhook:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /prodigi-webhook
                        Method: POST
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/handlers/prodigiWebhook.ts

    CreatePresignedUrlFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-CreatePresignedUrl
            Handler: src/handlers/createPresignedUrl.handler
            Environment:
                Variables:
                    BUCKET: !Ref Bucket
            Policies:
                - Statement:
                      - Sid: getObject
                        Effect: Allow
                        Action:
                            - s3:GetObject
                        Resource:
                            - !Sub arn:aws:s3:::${Bucket}/*
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                EntryPoints:
                    - src/handlers/createPresignedUrl.ts
