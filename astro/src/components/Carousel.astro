---
import { Image } from "@unpic/astro"
import { imageBreakpoints } from "@utils/breakpoints"

interface Props {
    images: string[]
    width: number
    height: number
}

const { images, width, height } = Astro.props
---

<div class="embla">
    <div class="embla__viewport">
        <div class="embla__container">
            {
                images.map((src, index) => (
                    <div class="embla__slide">
                        <div class="embla__slide__number">
                            <Image
                                id={`product-image-index-${index}`}
                                alt={`Product image index ${index}`}
                                src={src}
                                width={1429}
                                height={2000}
                                loading={"eager"}
                                fetchpriority={"high"}
                                sizes="(max-width: 768px) 125vw, 75vw"
                                breakpoints={imageBreakpoints({
                                    maxWidth: 1500,
                                    assetWidth: width,
                                })}
                            />
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
    <div class={`embla-thumbs ${images.length === 1 ? "hidden" : ""}`}>
        <div class="embla-thumbs__viewport">
            <div class="embla-thumbs__container">
                {
                    images.map((src, index) => (
                        <div
                            class={`embla-thumbs__slide ${index === 0 ? "embla-thumbs__slide--selected" : ""}`}
                        >
                            <button
                                type="button"
                                class="embla-thumbs__slide__number"
                            >
                                <Image
                                    id={`product-thumbnail-index-${index}`}
                                    alt={`Product thumbnail index ${index}`}
                                    src={src}
                                    width={1429}
                                    height={2000}
                                    loading="eager"
                                    fetchpriority="high"
                                    sizes="600px"
                                    breakpoints={imageBreakpoints({
                                        maxWidth: 600,
                                        assetWidth: width,
                                    })}
                                />
                            </button>
                        </div>
                    ))
                }
            </div>
        </div>
    </div>

    <style>
        .embla {
            --slide-size: 100%;
        }
        .embla__viewport {
            overflow: hidden;
        }
        .embla__container {
            display: flex;
            touch-action: pan-y pinch-zoom;
            margin-left: calc(var(--slide-spacing) * -1);
        }
        .embla__slide {
            transform: translate3d(0, 0, 0);
            flex: 0 0 var(--slide-size);
            min-width: 0;
            padding-left: var(--slide-spacing);
        }
        .embla__slide__number {
            border-radius: 1.8rem;
            display: flex;
            align-items: center;
            justify-content: center;
            user-select: none;
        }
        .embla-thumbs {
            --thumbs-slide-spacing: 0.8rem;
            --thumbs-slide-height: 8rem;
            margin-top: var(--thumbs-slide-spacing);
        }
        .embla-thumbs__viewport {
            overflow: hidden;
        }
        .embla-thumbs__container {
            display: flex;
            flex-direction: row;
            margin-left: calc(var(--thumbs-slide-spacing) * -1);
        }
        .embla-thumbs__slide {
            flex: 0 0 25%;
            min-width: 0;
            padding-left: var(--thumbs-slide-spacing);
        }
        .embla-thumbs__slide__number {
            -webkit-appearance: none;
            appearance: none;
            background-color: transparent;
            touch-action: manipulation;
            display: inline-flex;
            cursor: pointer;
            border: 0;
            padding: 0;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            padding-bottom: 2px;
            border-bottom: 4px solid white;
        }
        .embla-thumbs__slide--selected .embla-thumbs__slide__number {
            /* opacity: 0.65; */
            border-bottom: 4px solid black;
        }
    </style>

    <script>
        import EmblaCarousel, {
            type EmblaCarouselType,
            type EmblaOptionsType,
        } from "embla-carousel"

        document.addEventListener("astro:page-load", async () => {
            const OPTIONS: EmblaOptionsType = {}
            const OPTIONS_THUMBS: EmblaOptionsType = {
                containScroll: "keepSnaps",
                dragFree: true,
            }

            const viewportNodeMainCarousel = document.querySelector(
                ".embla__viewport"
            ) as HTMLElement
            const viewportNodeThumbCarousel = document.querySelector(
                ".embla-thumbs__viewport"
            ) as HTMLElement

            if (!viewportNodeMainCarousel || !viewportNodeThumbCarousel) return

            const addThumbBtnsClickHandlers = (
                emblaApiMain: EmblaCarouselType,
                emblaApiThumb: EmblaCarouselType
            ): (() => void) => {
                const slidesThumbs = emblaApiThumb.slideNodes()

                const scrollToIndex = slidesThumbs.map(
                    (_, index) => (): void => emblaApiMain.scrollTo(index)
                )

                slidesThumbs.forEach((slideNode, index) => {
                    slideNode.addEventListener(
                        "click",
                        scrollToIndex[index],
                        false
                    )
                })

                return (): void => {
                    slidesThumbs.forEach((slideNode, index) => {
                        slideNode.removeEventListener(
                            "click",
                            scrollToIndex[index],
                            false
                        )
                    })
                }
            }

            const addToggleThumbBtnsActive = (
                emblaApiMain: EmblaCarouselType,
                emblaApiThumb: EmblaCarouselType
            ): (() => void) => {
                const slidesThumbs = emblaApiThumb.slideNodes()

                const toggleThumbBtnsState = (): void => {
                    emblaApiThumb.scrollTo(emblaApiMain.selectedScrollSnap())
                    const previous = emblaApiMain.previousScrollSnap()
                    const selected = emblaApiMain.selectedScrollSnap()
                    slidesThumbs[previous].classList.remove(
                        "embla-thumbs__slide--selected"
                    )
                    slidesThumbs[selected].classList.add(
                        "embla-thumbs__slide--selected"
                    )
                }

                emblaApiMain.on("select", toggleThumbBtnsState)
                emblaApiThumb.on("init", toggleThumbBtnsState)

                return (): void => {
                    const selected = emblaApiMain.selectedScrollSnap()
                    slidesThumbs[selected].classList.remove(
                        "embla-thumbs__slide--selected"
                    )
                }
            }

            const emblaApiMain = EmblaCarousel(
                viewportNodeMainCarousel,
                OPTIONS
            )
            const emblaApiThumb = EmblaCarousel(
                viewportNodeThumbCarousel,
                OPTIONS_THUMBS
            )

            const removeThumbBtnsClickHandlers = addThumbBtnsClickHandlers(
                emblaApiMain,
                emblaApiThumb
            )
            const removeToggleThumbBtnsActive = addToggleThumbBtnsActive(
                emblaApiMain,
                emblaApiThumb
            )

            emblaApiMain
                .on("destroy", removeThumbBtnsClickHandlers)
                .on("destroy", removeToggleThumbBtnsActive)

            emblaApiThumb
                .on("destroy", removeThumbBtnsClickHandlers)
                .on("destroy", removeToggleThumbBtnsActive)
        })
    </script>

    <!-- https://www.embla-carousel.com/examples/predefined/ -->
    <!-- https://codesandbox.io/p/sandbox/3n5r7x?file=%2Fsrc%2Fjs%2Findex.ts%3A1%2C8-1%2C21 -->
</div>
