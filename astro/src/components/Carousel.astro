---
import { Image } from "@unpic/astro"
import { imageBreakpoints } from "@utils/breakpoints"

interface Props {
    images: string[]
    width: number
    height: number
}

const { images, width, height } = Astro.props
---

<div class="relative" data-carousel>
    <div
        class="w-full overflow-x-auto snap-x snap-mandatory flex scroll-smooth relative"
        data-carousel-viewport
        role="region"
        aria-label="Image carousel"
        tabindex="0"
    >
        {
            images.map((src, index) => (
                <div
                    id={`carousel-slide-${index}`}
                    data-carousel-slide
                    class="flex-none min-w-full snap-center snap-always flex items-center justify-center"
                    role="group"
                    aria-roledescription="slide"
                    aria-label={`Slide ${index + 1} of ${images.length}`}
                    aria-hidden={index === 0 ? "false" : "true"}
                >
                    <Image
                        id={`product-image-index-${index}`}
                        alt={`Product image index ${index}`}
                        src={src}
                        width={width}
                        height={height}
                        loading={"eager"}
                        fetchpriority={"high"}
                        sizes="100vw"
                        breakpoints={imageBreakpoints({
                            maxWidth: 1500,
                            assetWidth: width,
                        })}
                        class="w-full max-w-full h-auto block"
                    />
                </div>
            ))
        }
    </div>

    {images.length > 1 ? (
        <>
            <button
                type="button"
                class="absolute left-2 top-1/2 -translate-y-1/2 z-10 rounded-full bg-white/80 hover:bg-white shadow p-2 focus:outline-none focus:ring-2 focus:ring-gray-800"
                data-carousel-prev
                aria-label="Previous slide"
            >
                <span aria-hidden="true" class="block w-5 h-5">‹</span>
            </button>
            <button
                type="button"
                class="absolute right-2 top-1/2 -translate-y-1/2 z-10 rounded-full bg-white/80 hover:bg-white shadow p-2 focus:outline-none focus:ring-2 focus:ring-gray-800"
                data-carousel-next
                aria-label="Next slide"
            >
                <span aria-hidden="true" class="block w-5 h-5">›</span>
            </button>
        </>
    ) : (
        <></>
    )}

    <div class={`mt-2 ${images.length === 1 ? "hidden" : ""}`}>
        <div class="flex gap-2 overflow-x-auto pb-2" data-carousel-thumbs>
            {
                images.map((src, index) => (
                    <button
                        type="button"
                        class={`thumbnail-button relative rounded-md overflow-hidden focus:outline-none focus:ring-2 focus:ring-gray-800 flex-none`}
                        data-carousel-thumb
                        data-index={index}
                        aria-label={`Go to slide ${index + 1}`}
                        aria-controls={`carousel-slide-${index}`}
                        aria-selected={index === 0 ? "true" : "false"}
                    >
                        <Image
                            id={`product-thumbnail-index-${index}`}
                            alt={`Product thumbnail index ${index}`}
                            src={src}
                            width={Math.round(width / 6)}
                            height={Math.round(height / 6)}
                            loading="eager"
                            fetchpriority="high"
                            sizes="150px"
                            breakpoints={imageBreakpoints({
                                maxWidth: 600,
                                assetWidth: width,
                            })}
                            class="block"
                        />
                    </button>
                ))
            }
        </div>
    </div>

    <p class="sr-only" aria-live="polite" data-carousel-status>
        {`Slide 1 of ${images.length}`}
    </p>

    <style>
        [data-carousel-viewport] {
            scrollbar-width: none;
            -ms-overflow-style: none;
            scroll-snap-type: x mandatory; /* enforce snap in Safari/iOS */
        }
        [data-carousel-viewport]::-webkit-scrollbar {
            display: none;
        }
        [data-carousel-slide] {
            scroll-snap-align: center; /* ensure center snapping across browsers */
            scroll-snap-stop: always;
        }
        
        /* Thumbnail styling to match original Embla carousel */
        [data-carousel-thumbs] {
            scrollbar-width: none;
            -ms-overflow-style: none;
        }
        [data-carousel-thumbs]::-webkit-scrollbar {
            display: none;
        }
        .thumbnail-button {
            width: 25%;
            max-width: 200px;
            min-width: 100px;
            cursor: pointer;
            border: 0;
            padding: 0;
            margin: 0;
            background-color: transparent;
            touch-action: manipulation;
            display: flex;
            align-items: center;
            justify-content: center;
            padding-bottom: 2px;
            border-bottom: 4px solid transparent;
            transition: border-color 0.2s;
        }
        .thumbnail-button[aria-selected="true"] {
            border-bottom-color: #1F2937;
        }
        .thumbnail-button:hover:not([aria-selected="true"]) {
            border-bottom-color: #9CA3AF;
        }
        .thumbnail-button img {
            width: 100%;
            height: auto;
        }
        
        @media (max-width: 768px) {
            .thumbnail-button {
                width: 33.333%;
            }
        }
    </style>

    <script>
        document.addEventListener("astro:page-load", () => {
            const carousels = document.querySelectorAll<HTMLElement>('[data-carousel]')
            carousels.forEach((root: HTMLElement) => {
                const viewport = root.querySelector<HTMLElement>('[data-carousel-viewport]')
                const slideNodes = Array.from(
                    root.querySelectorAll<HTMLElement>('[data-carousel-slide]')
                )
                const thumbButtons = Array.from(
                    root.querySelectorAll<HTMLButtonElement>('[data-carousel-thumb]')
                )
                const prevBtn = root.querySelector<HTMLButtonElement>('[data-carousel-prev]')
                const nextBtn = root.querySelector<HTMLButtonElement>('[data-carousel-next]')
                const status = root.querySelector<HTMLElement>('[data-carousel-status]')

                if (!viewport || slideNodes.length === 0) return

                let currentIndex = 0

                const setSelected = (index: number) => {
                    currentIndex = Math.max(0, Math.min(index, slideNodes.length - 1))
                    slideNodes.forEach((el, i) => {
                        el.setAttribute('aria-hidden', i === currentIndex ? 'false' : 'true')
                    })
                    thumbButtons.forEach((btn, i) => {
                        btn.setAttribute('aria-selected', i === currentIndex ? 'true' : 'false')
                    })
                    if (status) status.textContent = `Slide ${currentIndex + 1} of ${slideNodes.length}`
                }

                const scrollToIndex = (index: number) => {
                    const target = slideNodes[index]
                    if (!target) return
                    viewport.scrollTo({ left: target.offsetLeft, behavior: 'smooth' })
                    setSelected(index)
                }

                prevBtn?.addEventListener('click', () => scrollToIndex(currentIndex - 1))
                nextBtn?.addEventListener('click', () => scrollToIndex(currentIndex + 1))
                thumbButtons.forEach((btn, i) => {
                    btn.addEventListener('click', () => scrollToIndex(i))
                })

                let raf = false
                const onScroll = () => {
                    // Find nearest slide by offset
                    let nearestIndex = 0
                    let minDist = Infinity
                    const scrollLeft = viewport.scrollLeft
                    slideNodes.forEach((el, i) => {
                        const d = Math.abs(el.offsetLeft - scrollLeft)
                        if (d < minDist) {
                            minDist = d
                            nearestIndex = i
                        }
                    })
                    if (nearestIndex !== currentIndex) setSelected(nearestIndex)
                }
                viewport.addEventListener('scroll', () => {
                    if (raf) return
                    raf = true
                    requestAnimationFrame(() => {
                        raf = false
                        onScroll()
                    })
                })

                root.addEventListener('keydown', (e: KeyboardEvent) => {
                    if (e.key === 'ArrowLeft') {
                        e.preventDefault()
                        scrollToIndex(currentIndex - 1)
                    } else if (e.key === 'ArrowRight') {
                        e.preventDefault()
                        scrollToIndex(currentIndex + 1)
                    }
                })

                // Init
                setSelected(0)
            })
        })
    </script>
</div>