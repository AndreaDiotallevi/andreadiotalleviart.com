---
export const prerender = false

import LoadingSpinner from "@components/LoadingSpinner.astro"
import BaseLayout from "@layouts/BaseLayout.astro"
import { Image } from "@unpic/astro"
import { getLocalCurrency } from "@utils/currency"

import { formatCurrency } from "@utils/intl"
import { retrieveCheckoutSession } from "@utils/serverless"
import type { Currency, StripePrice } from "@utils/stripe"
import type Stripe from "stripe"

const sessionId = Astro.url.searchParams.get("session_id")

let session: Stripe.Checkout.Session | null = null
let currency: Currency = getLocalCurrency(
    Astro.locals.netlify.context.geo.country?.code
)
let coupon: Stripe.Coupon | undefined
let cartEmpty: boolean = false
let sessionExpired: boolean = false
let error: boolean = false

if (sessionId) {
    const response = await retrieveCheckoutSession({ sessionId })

    if (!response.session) {
        error = true
    } else {
        session = response.session
        if (session.status === "expired") {
            sessionExpired = true
        }
        currency = session.currency as Currency
        coupon =
            session.total_details?.breakdown?.discounts[0]?.discount?.coupon
    }
} else {
    cartEmpty = true
}
---

<BaseLayout
    title="Cart | Andrea Diotallevi Art"
    description="Your shopping cart."
    hideFooter={true}
>
    <div
        id="cart-page-content"
        data-currency={currency}
        data-session-status={session?.status}
        class="max-w-screen-xl mx-auto px-4 py-8 pt-0 md:pt-8"
    >
        <h1 class="text-center text-2xl md:text-5xl font-semibold mb-4 md:mb-6">
            Cart
        </h1>
        {
            cartEmpty || sessionExpired ? (
                <div class="flex flex-col items-center">
                    <p class="text-center mb-4">
                        {cartEmpty
                            ? "Your cart is empty."
                            : "Your session has expired."}
                    </p>
                    <a
                        href="/shop"
                        class="block w-full px-4 py-3 text-black bg-white rounded-lg border border-black md:hover:bg-black md:hover:text-white text-center font-semibold max-w-lg mb-4 transition-colors duration-300"
                    >
                        Explore prints
                    </a>
                </div>
            ) : session ? (
                <>
                    <table class="min-w-full">
                        <thead class="md:text-2xl">
                            <tr class="font-semibold">
                                <th class="text-left">Item</th>
                                <th class="hidden md:table-cell text-center">
                                    Price
                                </th>
                                <th class="text-center">Quantity</th>
                                <th class="text-right md:min-w-36">Subtotal</th>
                            </tr>
                        </thead>
                        <tbody class="md:text-xl">
                            {session.line_items?.data.map(item => {
                                const price =
                                    item.price as unknown as StripePrice

                                return (
                                    <tr>
                                        <td class="py-2 md:py-4 pr-1 md:pr-8 flex items-center">
                                            <a
                                                href={`/shop/${price.product.metadata.category}/${price.product.metadata.slug}`}
                                                class="min-w-[60px] md:hover:opacity-70 transition-opacity duration-300"
                                            >
                                                <Image
                                                    alt={
                                                        price.product.metadata
                                                            .displayName
                                                    }
                                                    src={
                                                        price.product.images[0]
                                                    }
                                                    width={60}
                                                    height={85}
                                                    class="w-full h-auto object-contain"
                                                    loading="eager"
                                                    fetchpriority="high"
                                                />
                                            </a>
                                            <span class="hidden md:block pl-4">
                                                {
                                                    price.product.metadata
                                                        .displayName
                                                }
                                                <span class="hidden md:block text-base pt-2">
                                                    {price.product.description}
                                                </span>
                                            </span>
                                        </td>
                                        <td class="py-2 md:py-4 px-0 md:px-8 hidden md:table-cell">
                                            {formatCurrency({
                                                value: price.currency_options[
                                                    currency
                                                ].unit_amount,
                                                currency,
                                            })}
                                        </td>
                                        <td class="py-2 md:py-4 px-0 md:px-8 text-center">
                                            <div class="border border-black rounded-lg h-12 flex items-center justify-center w-fit mx-auto">
                                                <button
                                                    class="flex items-center justify-center text-4xl w-12 h-12 md:hover:text-gray-600 transition-colors duration-300"
                                                    data-price-id={price.id}
                                                    id={`remove-from-cart-${price.id}`}
                                                >
                                                    <span class="md:pb-1">
                                                        -
                                                    </span>
                                                    <LoadingSpinner />
                                                </button>
                                                <p class="min-w-12 flex items-center justify-center border-x border-gray-400">
                                                    {item.quantity}
                                                </p>
                                                <button
                                                    class="flex items-center justify-center text-4xl w-12 h-12 md:hover:text-gray-600 transition-colors duration-300"
                                                    data-price-id={price.id}
                                                    id={`add-to-cart-${price.id}`}
                                                >
                                                    <span class="md:pb-1">
                                                        +
                                                    </span>
                                                    <LoadingSpinner />
                                                </button>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            {formatCurrency({
                                                value: item.amount_subtotal,
                                                currency,
                                            })}
                                        </td>
                                    </tr>
                                )
                            })}
                        </tbody>
                    </table>
                    <div class="flex justify-end mb-8">
                        <table class="md:text-xl">
                            <tbody>
                                <tr>
                                    <td>Subtotal</td>
                                    <td class="text-right md:py-1 min-w-36">
                                        {formatCurrency({
                                            value: session.amount_subtotal!,
                                            currency,
                                        })}
                                    </td>
                                </tr>
                                <tr>
                                    <td>Shipping</td>
                                    <td class="text-right md:py-1 min-w-36">
                                        Free
                                    </td>
                                </tr>
                                <tr>
                                    <td>Discounts</td>
                                    <td class="text-right md:py-1 min-w-36">
                                        {formatCurrency({
                                            value: session.total_details
                                                ?.amount_discount!,
                                            currency,
                                        })}
                                    </td>
                                </tr>
                                <tr>
                                    <td class="font-semibold">Total</td>
                                    <td class="text-right md:py-1 min-w-36 font-semibold">
                                        {formatCurrency({
                                            value: session.amount_total!,
                                            currency,
                                        })}
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="flex flex-col items-center md:items-end space-y-4">
                        <div class="w-full max-w-lg">
                            <form id="promotion-code-form" class="flex h-12">
                                {coupon ? (
                                    <p class="w-full px-3 py-3 flex items-center h-12 text-nowrap border border-gray-200 rounded-md bg-gray-200 mr-2 font-semibold overflow-x-auto overflow-y-hidden">
                                        {coupon.name} ({coupon.percent_off}%
                                        off)
                                    </p>
                                ) : (
                                    <input
                                        id="promotion-code-value"
                                        name="promotion-code-value"
                                        type="text"
                                        class="w-full px-3 py-3 border border-black rounded-md mr-2 font-semibold h-12"
                                        placeholder="Discount code"
                                        autocomplete="off"
                                        required
                                    />
                                )}
                                <button
                                    id={
                                        coupon
                                            ? "remove-promotion-code-button"
                                            : "add-promotion-code-button"
                                    }
                                    type="submit"
                                    class="w-40 px-4 py-3 text-black bg-white rounded-lg border border-black md:hover:text-gray-600 text-center font-semibold max-w-lg transition-colors duration-300 ml-2 text-nowrap"
                                >
                                    <span class="md:pb-1">
                                        {coupon ? "Remove" : "Apply"}
                                    </span>
                                    <LoadingSpinner />
                                </button>
                            </form>
                            <div class="flex w-full max-w-lg pt-2">
                                <p
                                    id="promotion-code-error"
                                    class="text-red-700 hidden text-wrap"
                                />
                            </div>
                        </div>
                        <a
                            href="/shop"
                            class="w-full px-4 py-3 text-black bg-white rounded-lg border border-black md:hover:bg-black md:hover:text-white text-center font-semibold max-w-lg transition-colors duration-300"
                        >
                            Explore more prints
                        </a>
                        <a
                            href={`/checkout?client_secret=${session.client_secret}`}
                            class="w-full px-4 py-3 text-white bg-black rounded-lg md:hover:bg-gray-800 text-center font-semibold max-w-lg transition-colors duration-300"
                        >
                            Proceed to checkout
                        </a>
                    </div>
                </>
            ) : error ? (
                <p class="font-semibold min-h-[48px] border border-red-700 rounded-md bg-red-100 text-red-800 flex items-center px-4 py-2">
                    There was an error retrieving your session. Please try
                    refreshing the page.
                </p>
            ) : null
        }
    </div>
</BaseLayout>

<script>
    import {
        addToCart,
        removeFromCart,
        addPromotionCode,
        removePromotionCode,
    } from "@scripts/cart"
    import {
        clearClientSession,
        updateClientSession,
    } from "@utils/localStorage"

    import type { Currency } from "@utils/stripe"
    import { navigate } from "astro:transitions/client"

    document.addEventListener("astro:page-load", async () => {
        const cartPageContent = document.getElementById("cart-page-content")

        if (!cartPageContent) return

        const currency = cartPageContent.dataset.currency as Currency
        const sessionStatus = cartPageContent.dataset.sessionStatus

        if (sessionStatus === "expired") {
            clearClientSession()
        }

        const addToCartButtons = document.querySelectorAll(
            '[id^="add-to-cart-"]'
        ) as NodeListOf<HTMLButtonElement>

        const removeFromCartButtons = document.querySelectorAll(
            '[id^="remove-from-cart-"]'
        ) as NodeListOf<HTMLButtonElement>

        const addPromotionCodeButton = document.querySelector(
            "#add-promotion-code-button"
        ) as HTMLButtonElement

        const removePromotionCodeButton = document.querySelector(
            "#remove-promotion-code-button"
        ) as HTMLButtonElement

        const promotionCodeForm = document.querySelector(
            "#promotion-code-form"
        ) as HTMLFormElement

        addToCartButtons.forEach(button => {
            button.addEventListener("click", async e => {
                e.preventDefault()

                button.querySelector("span")?.classList.add("hidden")

                button
                    .querySelector("#loading-spinner")
                    ?.classList.remove("hidden")

                const priceId = button.dataset.priceId as string
                await addToCart({ priceId, currency })
            })
        })

        removeFromCartButtons.forEach(button => {
            button.addEventListener("click", async e => {
                e.preventDefault()

                button.querySelector("span")?.classList.add("hidden")

                button
                    .querySelector("#loading-spinner")
                    ?.classList.remove("hidden")

                const priceId = button.dataset.priceId as string
                await removeFromCart({ priceId, currency })
            })
        })

        promotionCodeForm &&
            promotionCodeForm.addEventListener("submit", async e => {
                e.preventDefault()

                const promotionCodeElement = document.querySelector(
                    "#promotion-code-value"
                ) as HTMLInputElement

                const code = promotionCodeElement.value.trim()

                addPromotionCodeButton
                    .querySelector("span")
                    ?.classList.add("hidden")

                addPromotionCodeButton
                    .querySelector("#loading-spinner")
                    ?.classList.remove("hidden")

                const promotionCodeError = document.querySelector(
                    "#promotion-code-error"
                ) as HTMLInputElement

                const { session, error } = await addPromotionCode({
                    code,
                    currency,
                })

                if (session) {
                    updateClientSession({
                        session,
                        promotionCode: code,
                    })
                    navigate(`/cart?session_id=${session.id}`, {
                        history: "replace",
                    })
                } else {
                    addPromotionCodeButton
                        .querySelector("span")
                        ?.classList.remove("hidden")

                    addPromotionCodeButton
                        .querySelector("#loading-spinner")
                        ?.classList.add("hidden")

                    promotionCodeError.classList.remove("hidden")
                    promotionCodeElement.classList.add("border-red-700")
                    promotionCodeError.textContent = error!
                }
            })

        removePromotionCodeButton &&
            removePromotionCodeButton.addEventListener("click", async e => {
                e.preventDefault()

                removePromotionCodeButton
                    .querySelector("span")
                    ?.classList.add("hidden")

                removePromotionCodeButton
                    .querySelector("#loading-spinner")
                    ?.classList.remove("hidden")

                const { session } = await removePromotionCode({ currency })

                if (session) {
                    updateClientSession({
                        session,
                    })
                    navigate(`/cart?session_id=${session.id}`, {
                        history: "replace",
                    })
                } else {
                    addPromotionCodeButton
                        .querySelector("span")
                        ?.classList.remove("hidden")

                    addPromotionCodeButton
                        .querySelector("#loading-spinner")
                        ?.classList.add("hidden")
                }
            })
    })
</script>
