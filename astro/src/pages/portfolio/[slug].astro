---
import { Image } from "@unpic/astro"
import BackToLink from "@components/BackToLink.astro"
import BaseLayout from "@layouts/BaseLayout.astro"

import { getCollection } from "astro:content"
import { transformImage } from "@utils/cloudinary"

export async function getStaticPaths() {
    const artworks = await getCollection("artworks")

    return artworks.map(artwork => ({
        params: {
            slug: artwork.data.slug,
        },
        props: {
            artwork: {
                ...artwork.data,
                images: artwork.data.images.map(image => transformImage(image)),
            },
        },
    }))
}

const { artwork } = Astro.props

Astro.response.headers.set(
    "cache-control",
    "public, max-age=120, must-revalidate"
)
Astro.response.headers.set(
    "netlify-cdn-cache-control",
    "public, durable, s-maxage=31536000"
)
---

<BaseLayout
    title={`${artwork.name} | Andrea Diotallevi Art`}
    description={artwork.description}
    image={artwork.images[0]}
    newsletter={true}
>
    <div
        class="flex flex-col md:flex-row items-center md:items-start px-4 py-8 pt-0 md:pt-8 max-w-screen-xl mx-auto"
    >
        <div class="w-full md:w-1/2 mb-6 md:mb-0 md:mr-8">
            <div class="md:hidden mb-4">
                <BackToLink href="/portfolio" text="Back to portfolio" />
            </div>
            <h1 class="text-2xl font-semibold mb-4 md:hidden">
                {artwork.name}
            </h1>
            <div class={`${artwork.images.length > 1 ? "mb-5" : "0"} relative`}>
                {
                    artwork.images.map((src, index) => (
                        <Image
                            id={`main-image-${index}`}
                            width={750}
                            height={750}
                            src={src}
                            alt={artwork.name}
                            class={`w-full h-auto ${index === 0 ? "" : "absolute top-0 opacity-0"}`}
                        />
                    ))
                }
            </div>
            {
                artwork.images.length > 1 ? (
                    <div class="grid grid-cols-4 gap-4">
                        {artwork.images.map((img, index) => (
                            <Image
                                id={`thumbnail-${index}`}
                                src={img}
                                width={172}
                                height={172}
                                alt={`Thumbnail ${index + 1}`}
                                class={`w-full h-auto cursor-pointer`}
                            />
                        ))}
                    </div>
                ) : null
            }
        </div>

        <div class="w-full md:w-1/2">
            <h1 class="text-5xl font-semibold mb-6 hidden md:block">
                {artwork.name}
            </h1>

            <div class="space-y-6">
                <div>
                    <h2 class="text-2xl font-semibold mb-2">Description</h2>
                    <p>{artwork.description}</p>
                </div>
            </div>
        </div>
    </div>
</BaseLayout>

<script>
    document.addEventListener("astro:page-load", () => {
        const mainImages = document.querySelectorAll('[id^="main-image-"]')
        const thumbnails = document.querySelectorAll('[id^="thumbnail-"]')

        if (!mainImages.length || !thumbnails.length) return

        let selectedThumbnail = thumbnails[0]
        // selectedThumbnail.classList.replace("border-white", "border-black")

        thumbnails.forEach((thumbnail, index) => {
            thumbnail.addEventListener("click", () => {
                mainImages.forEach((img, i) => {
                    if (i === index) {
                        img.classList.remove("absolute", "top-0", "opacity-0")
                    } else {
                        img.classList.add("absolute", "top-0", "opacity-0")
                    }
                })

                // selectedThumbnail.classList.replace(
                //     "border-black",
                //     "border-white"
                // )
                // thumbnail.classList.replace("border-white", "border-black")
                selectedThumbnail = thumbnail
            })
        })
    })
</script>
