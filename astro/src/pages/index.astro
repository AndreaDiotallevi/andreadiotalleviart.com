---
import BackToLink from "@components/BackToLink.astro"
import BaseLayout from "@layouts/BaseLayout.astro"

Astro.response.headers.set(
    "cache-control",
    "public, max-age=0, must-revalidate"
)
Astro.response.headers.set(
    "netlify-cdn-cache-control",
    "public, durable, s-maxage=31536000"
)
---

<BaseLayout
    title="Andrea Diotallevi | Generative Artist and Creative Coder"
    description="The artwork of Andrea Diotallevi, a practising generative artist, creative coder, software engineer, architect and pianist."
    darkTheme={true}
    tags={[
        "Andrea Diotallevi",
        "Andrea Diotallevi Art",
        "Generative Art",
        "Album Covers",
        "NFTs",
        "Giclee Fine Art Prints",
    ]}
>
    <div
        class="flex items-center justify-center h-[calc(100dvh-80px-80px)] bg-[#38444c]"
    >
        <div
            class="flex flex-col-reverse md:flex-row justify-between w-full max-w-screen-xl h-full px-4"
        >
            <div
                id="sketch"
                class="w-full md:w-1/2 h-[calc(100dvh-80px-80px-128px)] md:h-full"
            >
            </div>
            <div
                class="flex flex-col items-center justify-center w-full md:w-1/2 text-white mb-8 md:mb-0"
            >
                <div class="flex flex-col items-center md:items-start">
                    <h1
                        class="text-2xl md:text-5xl text-center md:text-left font-bold mb-4 md:mb-6"
                    >
                        I make art with code
                    </h1>
                    <BackToLink
                        href="/shop"
                        text="Explore prints"
                        towardsRight={true}
                        darkMode={true}
                    />
                </div>
            </div>
        </div>
    </div>
</BaseLayout>

<script>
    import p5 from "p5"

    document.addEventListener("astro:page-load", async () => {
        const sketchElement = document.querySelector("#sketch") as HTMLElement
        const canvasWidth = sketchElement?.clientWidth || 0
        const canvasHeight = sketchElement?.clientHeight || 0

        if (!sketchElement) return

        const sketch = (p5: p5) => {
            let t = 0

            p5.setup = () => {
                p5.createCanvas(canvasWidth, canvasHeight)
                p5.stroke(255, 25)
                p5.noFill()
            }

            p5.draw = () => {
                if (t > 0) {
                    p5.translate(p5.width / 2, p5.height / 2)
                    const n = p5.noise
                    const a = 0.5 * p5.min(p5.width, p5.height)
                    let b = n(t) * 6
                    let c = n(t + 60) * 6
                    p5.line(
                        p5.cos(b) * a,
                        p5.sin(b) * a,
                        p5.cos(c) * a,
                        p5.sin(c) * a
                    )
                }
                t++
            }

            p5.mouseClicked = () => {
                if (
                    p5.mouseX > 0 &&
                    p5.mouseX < p5.width &&
                    p5.mouseY > 0 &&
                    p5.mouseY < p5.height
                ) {
                    p5.noiseSeed(p5.random(1000))
                    p5.background("#38444c") // (56, 68, 76)
                    t = 0
                    p5.draw()
                }
            }

            p5.windowResized = () => {
                const newElement = document.querySelector("#sketch")
                if (!newElement) return
                p5.resizeCanvas(newElement.clientWidth, newElement.clientHeight)
                t = 0
                p5.draw()
            }
        }

        new p5(sketch, sketchElement)
    })
</script>
